Models of Computation
=====================

o Рассмотрим 2 модели:

    1. Конечный автомат

    2. Стековый автомат

o Модель вычислений сродни языку, который вы используете для описания решения проблемы. 
o Как правило, проблема, которую сложно решить правильно в одной модели вычислений, может быть решена 
  тривиально в другой. 

Finite State Machine
''''''''''''''''''''

Определение 

Детерминированный конечный автомат - это абстрактная машина, которая действует на входную строку, следуя 
некоторым правилам. Для определения конечного автомата необходимо предоставить следующие части: 
    1. Набор состояний. 
    2. Алфавит - набор символов, которые могут появляться во входной строке. 
    3. Выбранное начальное состояние. 
    4. Одно или несколько выбранных конечных состояний. 
    5. Правила перехода между состояниями. Каждое правило использует символ из входной строки. Его 
        действие можно описать следующим образом: «если автомат находится в состоянии S и появляется 
        входной символ C, следующим текущим состоянием будет Z». 

    Если текущее состояние не имеет правила для текущего входного символа, мы считаем поведение автомата 
    неопределенным. Неопределенное поведение - это концепция, известная больше математикам, чем инженерам.
    
    Для краткости мы описываем только «хорошие» случаи. «Плохие» случаи нас не интересуют, поэтому мы не 
    определяем поведение машины в них. Однако при реализации таких машин мы будем рассматривать все 
    неопределенные случаи как ошибочные и приводящие к особому состоянию ошибки. 

o Зачем возиться с автоматами? Некоторые задачи особенно легко решить при применении такой парадигмы 
    мышления. К таким задачам относятся управление встроенными устройствами и поиск подстрок, 
    соответствующих определенному шаблону. 
 
o В конечных автоматах нет памяти, нет присваиваний, нет конструкций if-then-else. Таким образом, это 
    совершенно другая абстрактная машина по сравнению с машиной фон Неймана. На самом деле нет ничего, 
    кроме состояний и переходов между ними. В модели фон Неймана состояние - это состояние памяти и 
    значений регистров.   

o существует важное ограничение: не все программы можно закодировать как конечные автоматы. Эта модель 
    вычислений не является полной по Тьюрингу, она не может анализировать сложные рекурсивно построенные 
    тексты, такие как XML-код. C и ассемблер являются полными по Тьюрингу, что означает, что они более 
    выразительны и могут использоваться для решения более широкого круга задач. Например, если длина 
    строки не ограничена, мы не можем подсчитать ее длину или количество слов в ней. Каждый результат был 
    бы состоянием, а в конечных автоматах существует только ограниченное количество со стояний, в то время
    как количество слов может быть произвольно большим, как и сами строки. 

o Конечные автоматы часто используются для описания встроенных систем, таких как кофемашины. Алфавит 
    состоит из событий (нажатые кнопки); вход - это последовательность действий пользователя. 

o Сетевые протоколы

o Существует также несколько методов проверки, таких как проверка модели, которые позволяют доказать 
    определенные свойства конечных автоматов - например, «если автомат достиг состояния B, он никогда не 
    достигнет состояния C.» Такие доказательства могут иметь большое значение при создании систем, 
    требующих высокой надежности. 

 .................


Forth Machine ( машина со стеком )
''''''''''''''''''''''''''''''''''

Форт - это язык, созданный Чарльзом Муром в 1971 году для 11-метрового радиотелескопа Национальной 
радиоастрономической обсерватории (NRAO) в Китт-Пик, штат Аризона. Эта система работала на двух первых 
миникомпьютерах, соединенных последовательным соединением. Как многопрограммная система, так и 
многопроцессорная система (в том смысле, что оба компьютера разделяли ответственность за управление 
телескопом и его научными инструментами), он управлял телескопом, собирал данные и поддерживал 
интерактивный графический терминал для взаимодействия с телескопом и анализа записанных данных. Сегодня 

Форт - это уникальный и интересный язык, увлекательный для изучения и отличный способ изменить точку 
зрения. Он до сих пор используется, в основном, во встроенном программном обеспечении, благодаря 
удивительному уровню интерактивности. Форт тоже может быть весьма эффективным. Интерпретаторы Forth можно 
увидеть в таких местах как 
    • Загрузчик FreeBSD. 
    • Прошивки роботов. 
    • Встроенное программное обеспечение (принтеры). 
    • Программное обеспечение космических кораблей. 

    Таким образом, можно безопасно называть Forth языком системного программирования. Реализовать 
 интерпретатор и компилятор Forth для Intel 64 на ассемблере несложно. Остальная часть этой главы 
 объяснит детали. Диалектов Forth почти столько же, сколько программистов Forth; мы будем использовать 
 наш собственный простой диалект. 







