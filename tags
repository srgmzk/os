!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/disk $(FLAGS) -std=gnu99 -c .\/src\/disk\/disk.c  -o .\/build\/disk\/disk.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/disk $(FLAGS) -std=gnu99 -c .\/src\/disk\/streamer.c  -o .\/build\/disk\/streamer.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/fs $(FLAGS) -std=gnu99 -c .\/src\/fs\/pparser.c  -o .\/build\/fs\/pparser.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/idt $(FLAGS) -std=gnu99  -c .\/src\/idt\/idt.c -o .\/build\/idt\/idt.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/memory  $(FLAGS) -std=gnu99  -c .\/src\/memory\/memory.c -o .\/build\/memory\/memory.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/memory\/heap  $(FLAGS) -std=gnu99  -c .\/src\/memory\/heap\/heap.c -o .\/build\/memory\/heap\/heap.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/memory\/heap  $(FLAGS) -std=gnu99  -c .\/src\/memory\/heap\/kheap.c -o .\/build\/memory\/heap\/kheap.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/memory\/paging $(FLAGS) -std=gnu99 -c .\/src\/memory\/paging\/paging.c  -o .\/build\/memory\/paging\/paging.o $/;"	m
-std	Makefile	/^	i686-elf-gcc $(INCLUDES) -I.\/src\/string $(FLAGS) -std=gnu99 -c .\/src\/string\/string.c  -o .\/build\/string\/string.o $/;"	m
AUTHOR_NAME	tmp/hello.c	/^MODULE_AUTHOR(AUTHOR_NAME);$/;"	v
AUTHOR_NAME	tmp/hello.c	47;"	d	file:
AUTHOR_NAME	tmp/io_req.c	/^MODULE_AUTHOR(AUTHOR_NAME);$/;"	v
AUTHOR_NAME	tmp/io_req.c	53;"	d	file:
AUTHOR_NAME	tmp/io_speaker.c	/^MODULE_AUTHOR(AUTHOR_NAME);$/;"	v
AUTHOR_NAME	tmp/io_speaker.c	43;"	d	file:
BITS	src/boot/boot.asm	/^BITS 16$/;"	l
BITS	tmp/boot_01.asm	/^BITS 16$/;"	l
BITS	tmp/boot_02.asm	/^BITS 16$/;"	l
BITS	tmp/boot_03.asm	/^BITS 16$/;"	l
BytesPerSector	src/boot/boot.asm	/^BytesPerSector		dw 0x200$/;"	d
CODE_SEG	src/boot/boot.asm	/^CODE_SEG equ gdt_code - gdt_start$/;"	d
CODE_SEG	src/kernel.asm	/^CODE_SEG equ 0x08$/;"	d
CONFIG_H	src/config.h	20;"	d
DATA_SEG	src/boot/boot.asm	/^DATA_SEG equ gdt_data - gdt_start$/;"	d
DATA_SEG	src/kernel.asm	/^DATA_SEG equ 0x10$/;"	d
DISKSTREAMER_H	src/disk/streamer.h	20;"	d
DISK_H	src/disk/disk.h	20;"	d
DriveNumber	src/boot/boot.asm	/^DriveNumber			db 0x80$/;"	d
EBADPATH	src/status.h	8;"	d
EINVARG	src/status.h	6;"	d
EIO	src/status.h	5;"	d
ENOMEM	src/status.h	7;"	d
FATCopies	src/boot/boot.asm	/^FATCopies			db 0x02$/;"	d
FILES	Makefile	/^FILES = .\/build\/kernel.asm.o .\/build\/kernel.o\\$/;"	m
FLAGS	Makefile	/^FLAGS = -g -ffreestanding -falign-jumps -falign-functions -falign-labels -falign-loops\\$/;"	m
HEAP_BLOCK_HAS_NEXT	src/memory/heap/heap.h	12;"	d
HEAP_BLOCK_IS_FIRST	src/memory/heap/heap.h	13;"	d
HEAP_BLOCK_TABLE_ENTRY	src/memory/heap/heap.h	/^typedef unsigned char HEAP_BLOCK_TABLE_ENTRY;$/;"	t
HEAP_BLOCK_TABLE_ENTRY_FREE	src/memory/heap/heap.h	9;"	d
HEAP_BLOCK_TABLE_ENTRY_TAKEN	src/memory/heap/heap.h	8;"	d
HEAP_H	src/memory/heap/heap.h	2;"	d
HiddenSectors	src/boot/boot.asm	/^HiddenSectors		dd 0x00$/;"	d
IDT_H	src/idt/idt.h	20;"	d
INCLUDES	Makefile	/^INCLUDES = -I.\/src\/$/;"	m
IO_H	src/io/io.h	20;"	d
KERNEL_CODE_SELECTOR	src/config.h	22;"	d
KERNEL_DATA_SELECTOR	src/config.h	23;"	d
KERNEL_H	src/kernel.h	20;"	d
KHEAP_H	src/memory/heap/kheap.h	2;"	d
MEMORY_H	src/memory/memory.h	20;"	d
MODULE_DESC	tmp/hello.c	/^MODULE_DESCRIPTION(MODULE_DESC);$/;"	v
MODULE_DESC	tmp/hello.c	48;"	d	file:
MODULE_DESC	tmp/io_req.c	/^MODULE_DESCRIPTION(MODULE_DESC);$/;"	v
MODULE_DESC	tmp/io_req.c	54;"	d	file:
MODULE_DESC	tmp/io_speaker.c	/^MODULE_DESCRIPTION(MODULE_DESC);$/;"	v
MODULE_DESC	tmp/io_speaker.c	44;"	d	file:
MY_BASEPORT	tmp/io_req.c	24;"	d	file:
MediaType	src/boot/boot.asm	/^MediaType			db 0xF8$/;"	d
NUMBER_PORTS	tmp/io_req.c	25;"	d	file:
NumSectors	src/boot/boot.asm	/^NumSectors			dw 0x00$/;"	d
NumberOfHeads	src/boot/boot.asm	/^NumberOfHeads		dw 0x40$/;"	d
OEMIdentifier	src/boot/boot.asm	/^OEMIdentifier		db 'PEACHOS '$/;"	d
ORG	src/boot/boot.asm	/^ORG 0x7c00$/;"	l
ORG	tmp/boot_01.asm	/^ORG 0$/;"	l
ORG	tmp/boot_02.asm	/^ORG 0$/;"	l
ORG	tmp/boot_03.asm	/^ORG 0$/;"	l
OS_ALL_OK	src/status.h	4;"	d
OS_DISK_TYPE	src/disk/disk.h	/^typedef unsigned int OS_DISK_TYPE;$/;"	t
OS_DISK_TYPE_REAL	src/disk/disk.h	25;"	d
OS_HEAP_ADDRESS	src/config.h	29;"	d
OS_HEAP_BLOCK_SIZE	src/config.h	28;"	d
OS_HEAP_SIZE_BYTES	src/config.h	27;"	d
OS_HEAP_TABLE_ADDRESS	src/config.h	30;"	d
OS_MAX_PATH	src/kernel.h	27;"	d
OS_SECTOR_SIZE	src/config.h	32;"	d
OS_TOTAL_INTERRUPTS	src/config.h	24;"	d
PAGING_ACCESS_FROM_ALL	src/memory/paging/paging.h	28;"	d
PAGING_CACHE_DISABLE	src/memory/paging/paging.h	26;"	d
PAGING_H	src/memory/paging/paging.h	20;"	d
PAGING_IS_PRESENT	src/memory/paging/paging.h	30;"	d
PAGING_IS_WRITEABLE	src/memory/paging/paging.h	29;"	d
PAGING_PAGE_SIZE	src/memory/paging/paging.h	33;"	d
PAGING_TOTAL_ENTRIES_PER_TABLE	src/memory/paging/paging.h	32;"	d
PAGING_WRITE_THROUGH	src/memory/paging/paging.h	27;"	d
PATHPARSER_H	src/fs/pparser.h	20;"	d
ReservedSectors	src/boot/boot.asm	/^ReservedSectors		dw 200$/;"	d
RootDirEntries	src/boot/boot.asm	/^RootDirEntries		dw 0x40$/;"	d
STATUS_H	src/status.h	2;"	d
STRING_H	src/string/string.h	20;"	d
SectorsBig	src/boot/boot.asm	/^SectorsBig			dd 0x773594$/;"	d
SectorsPerCluster	src/boot/boot.asm	/^SectorsPerCluster	db 0x80$/;"	d
SectorsPerFat	src/boot/boot.asm	/^SectorsPerFat		dw 0x100$/;"	d
SectorsPerTrack	src/boot/boot.asm	/^SectorsPerTrack		dw 0x20$/;"	d
Signature	src/boot/boot.asm	/^Signature			db 0x29$/;"	d
SystemIDString	src/boot/boot.asm	/^SystemIDString		db 'FAT16   '$/;"	d
VGA_HEIGHT	src/kernel.h	25;"	d
VGA_WIDTH	src/kernel.h	24;"	d
VolumeID	src/boot/boot.asm	/^VolumeID			dd 0xD105$/;"	d
VolumeIDString	src/boot/boot.asm	/^VolumeIDString		db 'PEACHOS BOO'$/;"	d
WinNTBit	src/boot/boot.asm	/^WinNTBit			db 0x00$/;"	d
_start	src/kernel.asm	/^_start:$/;"	l
_start	tmp/boot_01.asm	/^_start:$/;"	l
_start	tmp/boot_02.asm	/^_start:$/;"	l
_start	tmp/boot_03.asm	/^_start:$/;"	l
ata_lba_read	src/boot/boot.asm	/^ata_lba_read:$/;"	l
base	src/idt/idt.h	/^	uint32_t base; \/\/ base address of the start of the interrupt descriptor  table	$/;"	m	struct:idtr_desc
buffer	tmp/boot_03.asm	/^buffer:$/;"	l
current_directory	src/memory/paging/paging.c	/^current_directory = 0;$/;"	v	file:
directory_entry	src/memory/paging/paging.h	/^	uint32_t *directory_entry;$/;"	m	struct:paging_4gb_chunk
disable__interrupts	src/idt/idt.asm	/^disable__interrupts:$/;"	l
disk	src/disk/disk.c	/^struct disk disk;$/;"	v	typeref:struct:disk
disk	src/disk/disk.h	/^struct disk $/;"	s
disk	src/disk/streamer.h	/^	struct disk *disk;$/;"	m	struct:disk_stream	typeref:struct:disk_stream::disk
disk_get	src/disk/disk.c	/^disk_get(int index)$/;"	f
disk_read_block	src/disk/disk.c	/^disk_read_block(struct disk *idisk, unsigned int lba, int total, void *buf)$/;"	f
disk_read_sector	src/disk/disk.c	/^int disk_read_sector(int lba, int total, void *buf)$/;"	f
disk_search_and_init	src/disk/disk.c	/^disk_search_and_init()$/;"	f
disk_stream	src/disk/streamer.h	/^struct disk_stream$/;"	s
diskstreamer_close	src/disk/streamer.c	/^void diskstreamer_close(struct disk_stream *stream)$/;"	f
diskstreamer_new	src/disk/streamer.c	/^struct disk_stream *diskstreamer_new(int disk_id)$/;"	f
diskstreamer_read	src/disk/streamer.c	/^int diskstreamer_read(struct disk_stream *stream, void *out, int total)$/;"	f
diskstreamer_seek	src/disk/streamer.c	/^int diskstreamer_seek(struct disk_stream *stream, int pos)$/;"	f
drive_no	src/fs/pparser.h	/^	int drive_no;$/;"	m	struct:path_root
dw	src/boot/boot.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_01.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_02.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_03.asm	/^dw 0xAA55$/;"	l
enable_interrupts	src/idt/idt.asm	/^enable_interrupts:$/;"	l
enable_paging	src/memory/paging/paging.asm	/^enable_paging:$/;"	l
entries	src/memory/heap/heap.h	/^	HEAP_BLOCK_TABLE_ENTRY *entries;$/;"	m	struct:heap_table
error	tmp/boot_03.asm	/^error:$/;"	l
error_message	tmp/boot_03.asm	/^error_message: db 'Failed to load sector', 0$/;"	d
extern	src/idt/idt.asm	/^extern int21h_handler$/;"	l
extern	src/idt/idt.asm	/^extern no_interrupt_handler$/;"	l
extern	src/kernel.asm	/^extern kernel_main$/;"	l
f	Makefile	/^	dd if=.\/bin\/boot.bin >> .\/bin\/os.bin$/;"	m
f	Makefile	/^	dd if=.\/bin\/kernel.bin >> .\/bin\/os.bin$/;"	m
f	Makefile	/^	dd if=\/dev\/zero bs=1048576 count=16 >> .\/bin\/os.bin$/;"	m
first	src/fs/pparser.h	/^	struct path_part *first;$/;"	m	struct:path_root	typeref:struct:path_root::path_part
gdt_code	src/boot/boot.asm	/^gdt_code:			; CS SHOULD POINT TO THIS $/;"	l
gdt_data	src/boot/boot.asm	/^gdt_data:			; DS, SS, ES, FS, GS$/;"	l
gdt_descriptor	src/boot/boot.asm	/^gdt_descriptor:$/;"	l
gdt_end	src/boot/boot.asm	/^gdt_end:$/;"	l
gdt_null	src/boot/boot.asm	/^gdt_null:$/;"	l
gdt_start	src/boot/boot.asm	/^gdt_start:$/;"	l
global	src/idt/idt.asm	/^global disable_interrupts$/;"	l
global	src/idt/idt.asm	/^global enable_interrupts$/;"	l
global	src/idt/idt.asm	/^global idt_load$/;"	l
global	src/idt/idt.asm	/^global int21h$/;"	l
global	src/idt/idt.asm	/^global no_interrupt$/;"	l
global	src/io/io.asm	/^global insb$/;"	l
global	src/io/io.asm	/^global insw$/;"	l
global	src/io/io.asm	/^global outb$/;"	l
global	src/io/io.asm	/^global outw$/;"	l
global	src/kernel.asm	/^global _start$/;"	l
global	src/kernel.asm	/^global test_problem$/;"	l
global	src/memory/paging/paging.asm	/^global enable_paging$/;"	l
global	src/memory/paging/paging.asm	/^global paging_load_directory$/;"	l
handle_one	tmp/boot_02.asm	/^handle_one:$/;"	l
handle_zero	tmp/boot_02.asm	/^handle_zero:$/;"	l
heap	src/memory/heap/heap.h	/^struct heap $/;"	s
heap_address_to_block	src/memory/heap/heap.c	/^heap_address_to_block(struct heap *heap, void *address)$/;"	f
heap_align_value_to_upper	src/memory/heap/heap.c	/^heap_align_value_to_upper(uint32_t val)$/;"	f	file:
heap_block_to_address	src/memory/heap/heap.c	/^heap_block_to_address(struct heap *heap, int block)$/;"	f
heap_create	src/memory/heap/heap.c	/^heap_create(struct heap *heap, void *start, void *end, struct heap_table *table)$/;"	f
heap_free	src/memory/heap/heap.c	/^heap_free(struct heap *heap, void *ptr)$/;"	f
heap_get_entry_type	src/memory/heap/heap.c	/^heap_get_entry_type(HEAP_BLOCK_TABLE_ENTRY entry)$/;"	f	file:
heap_get_start_block	src/memory/heap/heap.c	/^heap_get_start_block(struct heap *heap, uint32_t total_blocks)$/;"	f
heap_malloc	src/memory/heap/heap.c	/^heap_malloc(struct heap *heap, size_t size)$/;"	f
heap_malloc_blocks	src/memory/heap/heap.c	/^heap_malloc_blocks(struct heap *heap, uint32_t total_blocks)$/;"	f
heap_mark_blocks_free	src/memory/heap/heap.c	/^heap_mark_blocks_free(struct heap *heap, int starting_block)$/;"	f
heap_mark_blocks_taken	src/memory/heap/heap.c	/^heap_mark_blocks_taken(struct heap *heap, int start_block, int total_blocks)$/;"	f
heap_table	src/memory/heap/heap.h	/^struct heap_table$/;"	s
heap_validate_alignment	src/memory/heap/heap.c	/^heap_validate_alignment(void *ptr)$/;"	f	file:
heap_validate_table	src/memory/heap/heap.c	/^heap_validate_table(void *start, void *end, struct heap_table *table)$/;"	f	file:
hello_world_cleanup_module	tmp/hello.c	/^module_exit(hello_world_cleanup_module);$/;"	v
hello_world_cleanup_module	tmp/hello.c	/^void hello_world_cleanup_module(void) {$/;"	f
hello_world_init_module	tmp/hello.c	/^int hello_world_init_module(void) {$/;"	f
hello_world_init_module	tmp/hello.c	/^module_init(hello_world_init_module);$/;"	v
idt_desc	src/idt/idt.h	/^struct idt_desc$/;"	s
idt_descriptors	src/idt/idt.c	/^struct idt_desc idt_descriptors[OS_TOTAL_INTERRUPTS];$/;"	v	typeref:struct:idt_desc
idt_init	src/idt/idt.c	/^idt_init()$/;"	f
idt_load	src/idt/idt.asm	/^idt_load:$/;"	l
idt_set	src/idt/idt.c	/^idt_set(int interrupt_no, void *address)$/;"	f
idt_zero	src/idt/idt.c	/^idt_zero()$/;"	f
idtr_desc	src/idt/idt.h	/^struct idtr_desc$/;"	s
idtr_descriptor	src/idt/idt.c	/^struct idtr_desc idtr_descriptor;$/;"	v	typeref:struct:idtr_desc
insb	src/io/io.asm	/^insb:$/;"	l
insw	src/io/io.asm	/^insw:$/;"	l
int21h	src/idt/idt.asm	/^int21h:$/;"	l
int21h_handler	src/idt/idt.c	/^int21h_handler()$/;"	f
isdigit	src/string/string.c	/^bool isdigit(char c)$/;"	f
jmp	src/boot/boot.asm	/^jmp short start$/;"	l
kernel_chunk	src/kernel.c	/^static struct paging_4gb_chunk *kernel_chunk = 0;$/;"	v	typeref:struct:paging_4gb_chunk	file:
kernel_heap	src/memory/heap/kheap.c	/^struct heap kernel_heap;$/;"	v	typeref:struct:heap
kernel_heap_table	src/memory/heap/kheap.c	/^struct heap_table kernel_heap_table;$/;"	v	typeref:struct:heap_table
kernel_main	src/kernel.c	/^void kernel_main()$/;"	f
kfree	src/memory/heap/kheap.c	/^kfree(void *ptr)$/;"	f
kheap_init	src/memory/heap/kheap.c	/^kheap_init()$/;"	f
kmalloc	src/memory/heap/kheap.c	/^kmalloc(size_t size)$/;"	f
kzalloc	src/memory/heap/kheap.c	/^kzalloc(size_t size)$/;"	f
limit	src/idt/idt.h	/^	uint16_t limit; \/\/ size of descriptor table - 1$/;"	m	struct:idtr_desc
load32	src/boot/boot.asm	/^load32:$/;"	l
memcmp	src/memory/memory.c	/^int memcmp(void *s1, void *s2, int count)$/;"	f
memset	src/memory/memory.c	/^void *memset(void *ptr, int c, size_t size)$/;"	f
message	tmp/boot_01.asm	/^message: db 'Hello world!', 0$/;"	d
message	tmp/boot_02.asm	/^message: db 'Hello world!', 0$/;"	d
mod_exit	tmp/io_req.c	/^module_exit(mod_exit);$/;"	v
mod_exit	tmp/io_req.c	/^static void mod_exit(void)$/;"	f	file:
mod_exit	tmp/io_speaker.c	/^module_exit(mod_exit);$/;"	v
mod_exit	tmp/io_speaker.c	/^static void mod_exit(void)$/;"	f	file:
mod_init	tmp/io_req.c	/^module_init(mod_init);$/;"	v
mod_init	tmp/io_req.c	/^static int mod_init(void)$/;"	f	file:
mod_init	tmp/io_speaker.c	/^module_init(mod_init);$/;"	v
mod_init	tmp/io_speaker.c	/^static int mod_init(void)$/;"	f	file:
next	src/fs/pparser.h	/^	struct path_part *next;$/;"	m	struct:path_part	typeref:struct:path_part::path_part
no_interrupt	src/idt/idt.asm	/^no_interrupt:$/;"	l
no_interrupt_handler	src/idt/idt.c	/^no_interrupt_handler()$/;"	f
nop	src/boot/boot.asm	/^nop$/;"	l
offset_1	src/idt/idt.h	/^	uint16_t offset_1; \/\/ offset bits 0..15$/;"	m	struct:idt_desc
offset_2	src/idt/idt.h	/^    uint16_t offset_2;  \/\/ offset bits 16..31$/;"	m	struct:idt_desc
outb	src/io/io.asm	/^outb:$/;"	l
outw	src/io/io.asm	/^outw:$/;"	l
paging_4gb_chunk	src/memory/paging/paging.h	/^struct paging_4gb_chunk$/;"	s
paging_4gb_chunk_get_directory	src/memory/paging/paging.c	/^uint32_t *paging_4gb_chunk_get_directory(struct paging_4gb_chunk *chunk)$/;"	f
paging_get_indexes	src/memory/paging/paging.c	/^paging_get_indexes(void *virtual_address, uint32_t *directory_index_out, uint32_t *table_index_out)$/;"	f
paging_is_aligned	src/memory/paging/paging.c	/^bool paging_is_aligned(void *addr)$/;"	f
paging_load_directory	src/memory/paging/paging.asm	/^paging_load_directory:$/;"	l
paging_new_4gb	src/memory/paging/paging.c	/^paging_4gb_chunk *paging_new_4gb(uint8_t flags)$/;"	f
paging_set	src/memory/paging/paging.c	/^paging_set(uint32_t *directory, void *virt, uint32_t val) $/;"	f
paging_switch	src/memory/paging/paging.c	/^paging_switch(uint32_t *directory)$/;"	f
part	src/fs/pparser.h	/^	const char *part;$/;"	m	struct:path_part
path_part	src/fs/pparser.h	/^struct path_part$/;"	s
path_root	src/fs/pparser.h	/^struct path_root$/;"	s
pathpars_free	src/fs/pparser.c	/^void pathpars_free(struct path_root *root)$/;"	f
pathparser_create_root	src/fs/pparser.c	/^static struct path_root *pathparser_create_root(int drive_number)$/;"	f	file:
pathparser_get_drive_by_path	src/fs/pparser.c	/^static int pathparser_get_drive_by_path(const char **path)$/;"	f	file:
pathparser_get_path_part	src/fs/pparser.c	/^static const char *pathparser_get_path_part(const char **path)$/;"	f	file:
pathparser_parse	src/fs/pparser.c	/^struct path_root *pathparser_parse(const char *path, const char *current_directory_path)$/;"	f
pathparser_parse_path_part	src/fs/pparser.c	/^struct path_part *pathparser_parse_path_part(struct path_part *last_part, const char **path)$/;"	f
pathparser_path_valid_format	src/fs/pparser.c	/^static int pathparser_path_valid_format(const char *filename)$/;"	f	file:
pos	src/disk/streamer.h	/^	int pos;$/;"	m	struct:disk_stream
print	src/kernel.c	/^print(const char* str)$/;"	f
print	tmp/boot_01.asm	/^print:$/;"	l
print	tmp/boot_02.asm	/^print:$/;"	l
print	tmp/boot_03.asm	/^print:$/;"	l
print_char	tmp/boot_01.asm	/^print_char:$/;"	l
print_char	tmp/boot_02.asm	/^print_char:$/;"	l
print_char	tmp/boot_03.asm	/^print_char:$/;"	l
saddr	src/memory/heap/heap.h	/^	void *saddr; \/\/ start address of the heap data pool$/;"	m	struct:heap
section	src/idt/idt.asm	/^section .asm$/;"	l
section	src/io/io.asm	/^section .asm$/;"	l
section	src/memory/paging/paging.asm	/^section .asm$/;"	l
sector_size	src/disk/disk.h	/^	int sector_size;$/;"	m	struct:disk
selector	src/idt/idt.h	/^    uint16_t selector;  \/\/ a code segment selector in GDT or LDT$/;"	m	struct:idt_desc
start	src/boot/boot.asm	/^start:$/;"	l
start	tmp/boot_01.asm	/^start:$/;"	l
start	tmp/boot_02.asm	/^start:$/;"	l
start	tmp/boot_03.asm	/^start:$/;"	l
step2	src/boot/boot.asm	/^step2:$/;"	l
step2	tmp/boot_01.asm	/^step2:$/;"	l
step2	tmp/boot_02.asm	/^step2:$/;"	l
step2	tmp/boot_03.asm	/^step2:$/;"	l
strlen	src/string/string.c	/^int strlen(const char *ptr)$/;"	f
strnlen	src/string/string.c	/^int strnlen(const char *ptr, int max)$/;"	f
table	src/memory/heap/heap.h	/^	struct heap_table *table;$/;"	m	struct:heap	typeref:struct:heap::heap_table
terminal_col	src/kernel.c	/^uint16_t terminal_col = 0;$/;"	v
terminal_initialize	src/kernel.c	/^terminal_initialize()$/;"	f
terminal_make_char	src/kernel.c	/^terminal_make_char(char c, char colour)$/;"	f
terminal_putchar	src/kernel.c	/^terminal_putchar(int x, int y, char c, char colour)$/;"	f
terminal_row	src/kernel.c	/^uint16_t terminal_row = 0;$/;"	v
terminal_writechar	src/kernel.c	/^terminal_writechar(char c, char colour)$/;"	f
test_problem	src/kernel.asm	/^test_problem: $/;"	l
times	src/boot/boot.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
times	src/kernel.asm	/^times 512-($-$$) db 0$/;"	l
times	tmp/boot_01.asm	/^times 33 db 0$/;"	l
times	tmp/boot_01.asm	/^times 510-($-$$) db 0$/;"	l
times	tmp/boot_02.asm	/^times 33 db 0$/;"	l
times	tmp/boot_02.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
times	tmp/boot_03.asm	/^times 33 db 0$/;"	l
times	tmp/boot_03.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
tonumericdigit	src/string/string.c	/^int tonumericdigit(char c)$/;"	f
total	src/memory/heap/heap.h	/^	size_t total;$/;"	m	struct:heap_table
type	src/disk/disk.h	/^	OS_DISK_TYPE type;$/;"	m	struct:disk
type	src/idt/idt.h	/^    uint8_t type;  \/\/ type and attributes, see below$/;"	m	struct:idt_desc
video_mem	src/kernel.c	/^uint16_t *video_mem = 0;$/;"	v
zero	src/idt/idt.h	/^    uint8_t zero;   \/\/ unused, set to 0$/;"	m	struct:idt_desc
