!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mos/zoo/udemy/OS/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
./bin/boot.bin	Makefile	/^.\/bin\/boot.bin: .\/src\/boot\/boot.asm$/;"	t
./bin/kernel.bin	Makefile	/^.\/bin\/kernel.bin: $(FILES)$/;"	t
./build/disk/disk.o	Makefile	/^.\/build\/disk\/disk.o: .\/src\/disk\/disk.c$/;"	t
./build/disk/streamer.o	Makefile	/^.\/build\/disk\/streamer.o: .\/src\/disk\/streamer.c$/;"	t
./build/fs/pparser.o	Makefile	/^.\/build\/fs\/pparser.o: .\/src\/fs\/pparser.c$/;"	t
./build/idt/idt.asm.o	Makefile	/^.\/build\/idt\/idt.asm.o: .\/src\/idt\/idt.asm$/;"	t
./build/idt/idt.o	Makefile	/^.\/build\/idt\/idt.o: .\/src\/idt\/idt.c$/;"	t
./build/io/io.asm.o	Makefile	/^.\/build\/io\/io.asm.o: .\/src\/io\/io.asm$/;"	t
./build/kernel.asm.o	Makefile	/^.\/build\/kernel.asm.o: .\/src\/kernel.asm$/;"	t
./build/kernel.o	Makefile	/^.\/build\/kernel.o: .\/src\/kernel.c$/;"	t
./build/memory/heap/heap.o	Makefile	/^.\/build\/memory\/heap\/heap.o: .\/src\/memory\/heap\/heap.c$/;"	t
./build/memory/heap/kheap.o	Makefile	/^.\/build\/memory\/heap\/kheap.o: .\/src\/memory\/heap\/kheap.c$/;"	t
./build/memory/memory.o	Makefile	/^.\/build\/memory\/memory.o: .\/src\/memory\/memory.c$/;"	t
./build/memory/paging/paging.asm.o	Makefile	/^.\/build\/memory\/paging\/paging.asm.o: .\/src\/memory\/paging\/paging.asm$/;"	t
./build/memory/paging/paging.o	Makefile	/^.\/build\/memory\/paging\/paging.o: .\/src\/memory\/paging\/paging.c$/;"	t
./build/string/string.o	Makefile	/^.\/build\/string\/string.o: .\/src\/string\/string.c$/;"	t
.asm	src/linker.ld	/^	.asm : ALIGN(4096)$/;"	S
.bss	src/linker.ld	/^	.bss : ALIGN(4096)$/;"	S
.data	src/linker.ld	/^	.data : ALIGN(4096)$/;"	S
.rodata	src/linker.ld	/^	.rodata : ALIGN(4096)$/;"	S
.text	src/linker.ld	/^	.text : ALIGN(4096)$/;"	S
AUTHOR_NAME	tmp/hello.c	/^#define AUTHOR_NAME /;"	d	file:
AUTHOR_NAME	tmp/io_req.c	/^#define AUTHOR_NAME /;"	d	file:
AUTHOR_NAME	tmp/io_speaker.c	/^#define AUTHOR_NAME /;"	d	file:
BITS	src/boot/boot.asm	/^BITS 16$/;"	l
BITS	tmp/boot_01.asm	/^BITS 16$/;"	l
BITS	tmp/boot_02.asm	/^BITS 16$/;"	l
BITS	tmp/boot_03.asm	/^BITS 16$/;"	l
CODE_SEG	src/boot/boot.asm	/^CODE_SEG equ gdt_code - gdt_start$/;"	d
CODE_SEG	src/kernel.asm	/^CODE_SEG equ 0x08$/;"	d
CONFIG_H	src/config.h	/^#define CONFIG_H$/;"	d
DATA_SEG	src/boot/boot.asm	/^DATA_SEG equ gdt_data - gdt_start$/;"	d
DATA_SEG	src/kernel.asm	/^DATA_SEG equ 0x10$/;"	d
DISKSTREAMER_H	src/disk/streamer.h	/^#define DISKSTREAMER_H$/;"	d
DISK_H	src/disk/disk.h	/^#define DISK_H$/;"	d
Disks	doc/filesystem.rst	/^Disks$/;"	c
EBADPATH	src/status.h	/^#define EBADPATH /;"	d
EINVARG	src/status.h	/^#define EINVARG /;"	d
EIO	src/status.h	/^#define EIO /;"	d
ENOMEM	src/status.h	/^#define ENOMEM /;"	d
Entry structure	doc/heap.rst	/^Entry structure$/;"	c
Entry types	doc/heap.rst	/^Entry types$/;"	c
FAT16	doc/filesystem.rst	/^FAT16$/;"	c
FILES	Makefile	/^FILES = .\/build\/kernel.asm.o .\/build\/kernel.o\\$/;"	m
FLAGS	Makefile	/^FLAGS = -g -ffreestanding -falign-jumps -falign-functions -falign-labels -falign-loops\\$/;"	m
Filesytem Structure	doc/filesystem.rst	/^Filesytem Structure$/;"	c
Finite State Machine	doc/models_of_computation.rst	/^Finite State Machine$/;"	s	chapter:Models of Computation
Forth Machine ( машина со стеком )	doc/models_of_computation.rst	/^Forth Machine ( машина со стеком )$/;"	s	chapter:Models of Computation
Free	doc/heap.rst	/^Free$/;"	c
HEAP_BLOCK_HAS_NEXT	src/memory/heap/heap.h	/^#define HEAP_BLOCK_HAS_NEXT /;"	d
HEAP_BLOCK_IS_FIRST	src/memory/heap/heap.h	/^#define HEAP_BLOCK_IS_FIRST /;"	d
HEAP_BLOCK_TABLE_ENTRY	src/memory/heap/heap.h	/^typedef unsigned char HEAP_BLOCK_TABLE_ENTRY;$/;"	t	typeref:typename:unsigned char
HEAP_BLOCK_TABLE_ENTRY_FREE	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_FREE /;"	d
HEAP_BLOCK_TABLE_ENTRY_TAKEN	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_TAKEN /;"	d
HEAP_H	src/memory/heap/heap.h	/^#define HEAP_H$/;"	d
IDTR	doc/interrupts.rst	/^IDTR$/;"	s	chapter:Interrup Descriptor Table (IDT)
IDT_H	src/idt/idt.h	/^#define IDT_H$/;"	d
INCLUDES	Makefile	/^INCLUDES = -I.\/src\/$/;"	m
IO_H	src/io/io.h	/^#define IO_H$/;"	d
Interrup Descriptor Table (IDT)	doc/interrupts.rst	/^Interrup Descriptor Table (IDT)$/;"	c
Interrupt Descriptor Array	doc/interrupts.rst	/^Interrupt Descriptor Array$/;"	s	chapter:Interrup Descriptor Table (IDT)
KERNEL_CODE_SELECTOR	src/config.h	/^#define KERNEL_CODE_SELECTOR /;"	d
KERNEL_DATA_SELECTOR	src/config.h	/^#define KERNEL_DATA_SELECTOR /;"	d
KERNEL_H	src/kernel.h	/^#define KERNEL_H$/;"	d
KHEAP_H	src/memory/heap/kheap.h	/^#define KHEAP_H$/;"	d
MEMORY_H	src/memory/memory.h	/^#define MEMORY_H$/;"	d
MODULE_DESC	tmp/hello.c	/^#define MODULE_DESC /;"	d	file:
MODULE_DESC	tmp/io_req.c	/^#define MODULE_DESC /;"	d	file:
MODULE_DESC	tmp/io_speaker.c	/^#define MODULE_DESC /;"	d	file:
MY_BASEPORT	tmp/io_req.c	/^#define MY_BASEPORT /;"	d	file:
Malloc example - Memory allocataion process	doc/heap.rst	/^Malloc example - Memory allocataion process$/;"	c
Memory of an uninitialized system	doc/heap.rst	/^Memory of an uninitialized system$/;"	c
Models of Computation	doc/models_of_computation.rst	/^Models of Computation$/;"	c
NUMBER_PORTS	tmp/io_req.c	/^#define NUMBER_PORTS /;"	d	file:
ORG	src/boot/boot.asm	/^ORG 0x7c00$/;"	l
ORG	tmp/boot_01.asm	/^ORG 0$/;"	l
ORG	tmp/boot_02.asm	/^ORG 0$/;"	l
ORG	tmp/boot_03.asm	/^ORG 0$/;"	l
OS_ALL_OK	src/status.h	/^#define OS_ALL_OK /;"	d
OS_DISK_TYPE	src/disk/disk.h	/^typedef unsigned int OS_DISK_TYPE;$/;"	t	typeref:typename:unsigned int
OS_DISK_TYPE_REAL	src/disk/disk.h	/^#define OS_DISK_TYPE_REAL /;"	d
OS_HEAP_ADDRESS	src/config.h	/^#define OS_HEAP_ADDRESS /;"	d
OS_HEAP_BLOCK_SIZE	src/config.h	/^#define OS_HEAP_BLOCK_SIZE /;"	d
OS_HEAP_SIZE_BYTES	src/config.h	/^#define OS_HEAP_SIZE_BYTES /;"	d
OS_HEAP_TABLE_ADDRESS	src/config.h	/^#define OS_HEAP_TABLE_ADDRESS /;"	d
OS_MAX_PATH	src/kernel.h	/^#define OS_MAX_PATH /;"	d
OS_SECTOR_SIZE	src/config.h	/^#define OS_SECTOR_SIZE /;"	d
OS_TOTAL_INTERRUPTS	src/config.h	/^#define OS_TOTAL_INTERRUPTS /;"	d
Our implementation	doc/heap.rst	/^Our implementation$/;"	c
Oveview of x86 Memory Model	doc/memory_model.rst	/^Oveview of x86 Memory Model$/;"	c
PAGING_ACCESS_FROM_ALL	src/memory/paging/paging.h	/^#define PAGING_ACCESS_FROM_ALL	/;"	d
PAGING_CACHE_DISABLE	src/memory/paging/paging.h	/^#define PAGING_CACHE_DISABLE /;"	d
PAGING_H	src/memory/paging/paging.h	/^#define PAGING_H$/;"	d
PAGING_IS_PRESENT	src/memory/paging/paging.h	/^#define PAGING_IS_PRESENT	/;"	d
PAGING_IS_WRITEABLE	src/memory/paging/paging.h	/^#define PAGING_IS_WRITEABLE	/;"	d
PAGING_PAGE_SIZE	src/memory/paging/paging.h	/^#define PAGING_PAGE_SIZE	/;"	d
PAGING_TOTAL_ENTRIES_PER_TABLE	src/memory/paging/paging.h	/^#define PAGING_TOTAL_ENTRIES_PER_TABLE	/;"	d
PAGING_WRITE_THROUGH	src/memory/paging/paging.h	/^#define PAGING_WRITE_THROUGH /;"	d
PATHPARSER_H	src/fs/pparser.h	/^#define PATHPARSER_H$/;"	d
Protected mode	doc/protected_mode.rst	/^Protected mode$/;"	c
Remapping Memory	doc/paging.rst	/^Remapping Memory$/;"	c
Remapping the Master PIC	doc/pic.rst	/^Remapping the Master PIC$/;"	c
STATUS_H	src/status.h	/^#define STATUS_H$/;"	d
STRING_H	src/string/string.h	/^#define STRING_H$/;"	d
Simple possible heap implementation	doc/heap.rst	/^Simple possible heap implementation$/;"	c
Stack, Subroutines	doc/memory_model.rst	/^Stack, Subroutines$/;"	s	chapter:Oveview of x86 Memory Model
Text mode	doc/text_mode.rst	/^Text mode$/;"	c
The data pool	doc/heap.rst	/^The data pool$/;"	c
The entry table	doc/heap.rst	/^The entry table$/;"	c
VGA_HEIGHT	src/kernel.h	/^#define VGA_HEIGHT /;"	d
VGA_WIDTH	src/kernel.h	/^#define VGA_WIDTH /;"	d
_start	src/boot/boot.asm	/^_start:$/;"	l
_start	src/kernel.asm	/^_start:$/;"	l
_start	tmp/boot_01.asm	/^_start:$/;"	l
_start	tmp/boot_02.asm	/^_start:$/;"	l
_start	tmp/boot_03.asm	/^_start:$/;"	l
all	Makefile	/^all: .\/bin\/boot.bin .\/bin\/kernel.bin$/;"	t
all	tmp/Makefile	/^all:$/;"	t
ata_lba_read	src/boot/boot.asm	/^ata_lba_read:$/;"	l
base	src/idt/idt.h	/^	uint32_t base; \/\/ base address of the start of the interrupt descriptor  table	$/;"	m	struct:idtr_desc	typeref:typename:uint32_t
buffer	tmp/boot_03.asm	/^buffer:$/;"	l
clean	Makefile	/^clean: $/;"	t
clean	tmp/Makefile	/^clean:$/;"	t
current_directory	src/memory/paging/paging.c	/^current_directory = 0;$/;"	v	typeref:typename:uint32_t *	file:
directory_entry	src/memory/paging/paging.h	/^	uint32_t *directory_entry;$/;"	m	struct:paging_4gb_chunk	typeref:typename:uint32_t *
disable__interrupts	src/idt/idt.asm	/^disable__interrupts:$/;"	l
disk	src/disk/disk.c	/^struct disk disk;$/;"	v	typeref:struct:disk
disk	src/disk/disk.h	/^struct disk $/;"	s
disk	src/disk/streamer.h	/^	struct disk *disk;$/;"	m	struct:disk_stream	typeref:struct:disk *
disk_get	src/disk/disk.c	/^disk_get(int index)$/;"	f	typeref:struct:disk *
disk_read_block	src/disk/disk.c	/^disk_read_block(struct disk *idisk, unsigned int lba, int total, void *buf)$/;"	f	typeref:typename:int
disk_read_sector	src/disk/disk.c	/^int disk_read_sector(int lba, int total, void *buf)$/;"	f	typeref:typename:int
disk_search_and_init	src/disk/disk.c	/^disk_search_and_init()$/;"	f	typeref:typename:void
disk_stream	src/disk/streamer.h	/^struct disk_stream$/;"	s
diskstreamer_close	src/disk/streamer.c	/^void diskstreamer_close(struct disk_stream *stream)$/;"	f	typeref:typename:void
diskstreamer_new	src/disk/streamer.c	/^struct disk_stream *diskstreamer_new(int disk_id)$/;"	f	typeref:struct:disk_stream *
diskstreamer_read	src/disk/streamer.c	/^int diskstreamer_read(struct disk_stream *stream, void *out, int total)$/;"	f	typeref:typename:int
diskstreamer_seek	src/disk/streamer.c	/^int diskstreamer_seek(struct disk_stream *stream, int pos)$/;"	f	typeref:typename:int
done	tmp/boot_01.asm	/^.done:$/;"	l
done	tmp/boot_02.asm	/^.done:$/;"	l
done	tmp/boot_03.asm	/^.done:$/;"	l
drive_no	src/fs/pparser.h	/^	int drive_no;$/;"	m	struct:path_root	typeref:typename:int
dw	src/boot/boot.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_01.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_02.asm	/^dw 0xAA55$/;"	l
dw	tmp/boot_03.asm	/^dw 0xAA55$/;"	l
enable_interrupts	src/idt/idt.asm	/^enable_interrupts:$/;"	l
enable_paging	src/memory/paging/paging.asm	/^enable_paging:$/;"	l
entries	src/memory/heap/heap.h	/^	HEAP_BLOCK_TABLE_ENTRY *entries;$/;"	m	struct:heap_table	typeref:typename:HEAP_BLOCK_TABLE_ENTRY *
error	tmp/boot_03.asm	/^error:$/;"	l
error_message	tmp/boot_03.asm	/^error_message: db 'Failed to load sector', 0$/;"	d
extern	src/idt/idt.asm	/^extern int21h_handler$/;"	l
extern	src/idt/idt.asm	/^extern no_interrupt_handler$/;"	l
extern	src/kernel.asm	/^extern kernel_main$/;"	l
first	src/fs/pparser.h	/^	struct path_part *first;$/;"	m	struct:path_root	typeref:struct:path_part *
gdt_code	src/boot/boot.asm	/^gdt_code:			; CS SHOULD POINT TO THIS $/;"	l
gdt_data	src/boot/boot.asm	/^gdt_data:			; DS, SS, ES, FS, GS$/;"	l
gdt_descriptor	src/boot/boot.asm	/^gdt_descriptor:$/;"	l
gdt_end	src/boot/boot.asm	/^gdt_end:$/;"	l
gdt_null	src/boot/boot.asm	/^gdt_null:$/;"	l
gdt_start	src/boot/boot.asm	/^gdt_start:$/;"	l
global	src/idt/idt.asm	/^global disable_interrupts$/;"	l
global	src/idt/idt.asm	/^global enable_interrupts$/;"	l
global	src/idt/idt.asm	/^global idt_load$/;"	l
global	src/idt/idt.asm	/^global int21h$/;"	l
global	src/idt/idt.asm	/^global no_interrupt$/;"	l
global	src/io/io.asm	/^global insb$/;"	l
global	src/io/io.asm	/^global insw$/;"	l
global	src/io/io.asm	/^global outb$/;"	l
global	src/io/io.asm	/^global outw$/;"	l
global	src/kernel.asm	/^global _start$/;"	l
global	src/kernel.asm	/^global test_problem$/;"	l
global	src/memory/paging/paging.asm	/^global enable_paging$/;"	l
global	src/memory/paging/paging.asm	/^global paging_load_directory$/;"	l
handle_one	tmp/boot_02.asm	/^handle_one:$/;"	l
handle_zero	tmp/boot_02.asm	/^handle_zero:$/;"	l
heap	src/memory/heap/heap.h	/^struct heap $/;"	s
heap_address_to_block	src/memory/heap/heap.c	/^heap_address_to_block(struct heap *heap, void *address)$/;"	f	typeref:typename:int
heap_align_value_to_upper	src/memory/heap/heap.c	/^heap_align_value_to_upper(uint32_t val)$/;"	f	typeref:typename:uint32_t	file:
heap_block_to_address	src/memory/heap/heap.c	/^heap_block_to_address(struct heap *heap, int block)$/;"	f	typeref:typename:void *
heap_create	src/memory/heap/heap.c	/^heap_create(struct heap *heap, void *start, void *end, struct heap_table *table)$/;"	f	typeref:typename:int
heap_free	src/memory/heap/heap.c	/^heap_free(struct heap *heap, void *ptr)$/;"	f	typeref:typename:void
heap_get_entry_type	src/memory/heap/heap.c	/^heap_get_entry_type(HEAP_BLOCK_TABLE_ENTRY entry)$/;"	f	typeref:typename:int	file:
heap_get_start_block	src/memory/heap/heap.c	/^heap_get_start_block(struct heap *heap, uint32_t total_blocks)$/;"	f	typeref:typename:int
heap_malloc	src/memory/heap/heap.c	/^heap_malloc(struct heap *heap, size_t size)$/;"	f	typeref:typename:void *
heap_malloc_blocks	src/memory/heap/heap.c	/^heap_malloc_blocks(struct heap *heap, uint32_t total_blocks)$/;"	f	typeref:typename:void *
heap_mark_blocks_free	src/memory/heap/heap.c	/^heap_mark_blocks_free(struct heap *heap, int starting_block)$/;"	f	typeref:typename:void
heap_mark_blocks_taken	src/memory/heap/heap.c	/^heap_mark_blocks_taken(struct heap *heap, int start_block, int total_blocks)$/;"	f	typeref:typename:void
heap_table	src/memory/heap/heap.h	/^struct heap_table$/;"	s
heap_validate_alignment	src/memory/heap/heap.c	/^heap_validate_alignment(void *ptr)$/;"	f	typeref:typename:bool	file:
heap_validate_table	src/memory/heap/heap.c	/^heap_validate_table(void *start, void *end, struct heap_table *table)$/;"	f	typeref:typename:int	file:
hello_world_cleanup_module	tmp/hello.c	/^void hello_world_cleanup_module(void) {$/;"	f	typeref:typename:void
hello_world_init_module	tmp/hello.c	/^int hello_world_init_module(void) {$/;"	f	typeref:typename:int
idt_desc	src/idt/idt.h	/^struct idt_desc$/;"	s
idt_descriptors	src/idt/idt.c	/^struct idt_desc idt_descriptors[OS_TOTAL_INTERRUPTS];$/;"	v	typeref:struct:idt_desc[]
idt_init	src/idt/idt.c	/^idt_init()$/;"	f	typeref:typename:void
idt_load	src/idt/idt.asm	/^idt_load:$/;"	l
idt_set	src/idt/idt.c	/^idt_set(int interrupt_no, void *address)$/;"	f	typeref:typename:void
idt_zero	src/idt/idt.c	/^idt_zero()$/;"	f	typeref:typename:void
idtr_desc	src/idt/idt.h	/^struct idtr_desc$/;"	s
idtr_descriptor	src/idt/idt.c	/^struct idtr_desc idtr_descriptor;$/;"	v	typeref:struct:idtr_desc
insb	src/io/io.asm	/^insb:$/;"	l
insw	src/io/io.asm	/^insw:$/;"	l
int21h	src/idt/idt.asm	/^int21h:$/;"	l
int21h_handler	src/idt/idt.c	/^int21h_handler()$/;"	f	typeref:typename:void
isdigit	src/string/string.c	/^bool isdigit(char c)$/;"	f	typeref:typename:bool
kernel_chunk	src/kernel.c	/^static struct paging_4gb_chunk *kernel_chunk = 0;$/;"	v	typeref:struct:paging_4gb_chunk *	file:
kernel_heap	src/memory/heap/kheap.c	/^struct heap kernel_heap;$/;"	v	typeref:struct:heap
kernel_heap_table	src/memory/heap/kheap.c	/^struct heap_table kernel_heap_table;$/;"	v	typeref:struct:heap_table
kernel_main	src/kernel.c	/^void kernel_main()$/;"	f	typeref:typename:void
kfree	src/memory/heap/kheap.c	/^kfree(void *ptr)$/;"	f	typeref:typename:void
kheap_init	src/memory/heap/kheap.c	/^kheap_init()$/;"	f	typeref:typename:void
kmalloc	src/memory/heap/kheap.c	/^kmalloc(size_t size)$/;"	f	typeref:typename:void *
kzalloc	src/memory/heap/kheap.c	/^kzalloc(size_t size)$/;"	f	typeref:typename:void *
limit	src/idt/idt.h	/^	uint16_t limit; \/\/ size of descriptor table - 1$/;"	m	struct:idtr_desc	typeref:typename:uint16_t
load32	src/boot/boot.asm	/^load32:$/;"	l
load_protected	src/boot/boot.asm	/^.load_protected:$/;"	l
loop	tmp/boot_01.asm	/^.loop:$/;"	l
loop	tmp/boot_02.asm	/^.loop:$/;"	l
loop	tmp/boot_03.asm	/^.loop:$/;"	l
memcmp	src/memory/memory.c	/^int memcmp(void *s1, void *s2, int count)$/;"	f	typeref:typename:int
memset	src/memory/memory.c	/^void *memset(void *ptr, int c, size_t size)$/;"	f	typeref:typename:void *
message	tmp/boot_01.asm	/^message: db 'Hello world!', 0$/;"	d
message	tmp/boot_02.asm	/^message: db 'Hello world!', 0$/;"	d
mod_exit	tmp/io_req.c	/^static void mod_exit(void)$/;"	f	typeref:typename:void	file:
mod_exit	tmp/io_speaker.c	/^static void mod_exit(void)$/;"	f	typeref:typename:void	file:
mod_init	tmp/io_req.c	/^static int mod_init(void)$/;"	f	typeref:typename:int	file:
mod_init	tmp/io_speaker.c	/^static int mod_init(void)$/;"	f	typeref:typename:int	file:
mov	src/boot/boot.asm	/^	mov ds, ax$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F0$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F2$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F3$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F4$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F5$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F6$/;"	d
mov	src/boot/boot.asm	/^	mov dx, 0x1F7$/;"	d
mov	src/kernel.asm	/^	mov ds, ax$/;"	d
mov	tmp/boot_01.asm	/^	mov ds, ax$/;"	d
mov	tmp/boot_02.asm	/^	mov ds, ax$/;"	d
mov	tmp/boot_03.asm	/^	mov dh, 0		; head number$/;"	d
mov	tmp/boot_03.asm	/^	mov ds, ax$/;"	d
next	src/fs/pparser.h	/^	struct path_part *next;$/;"	m	struct:path_part	typeref:struct:path_part *
next_sector	src/boot/boot.asm	/^.next_sector:$/;"	l
no_interrupt	src/idt/idt.asm	/^no_interrupt:$/;"	l
no_interrupt_handler	src/idt/idt.c	/^no_interrupt_handler()$/;"	f	typeref:typename:void
o Enabling Paging	doc/paging.rst	/^o Enabling Paging$/;"	s	chapter:Remapping Memory
o Hiding memory from process	doc/paging.rst	/^o Hiding memory from process$/;"	s	chapter:Remapping Memory
o Illusion of more memory	doc/paging.rst	/^o Illusion of more memory$/;"	s	chapter:Remapping Memory
o Page Fault Exception	doc/paging.rst	/^o Page Fault Exception$/;"	s	chapter:Remapping Memory
o Page directory structure holds:	doc/paging.rst	/^o Page directory structure holds:$/;"	s	chapter:Remapping Memory
o Virtual - 8086 Mode	doc/memory_model.rst	/^o Virtual - 8086 Mode$/;"	s	chapter:Oveview of x86 Memory Model
offset_1	src/idt/idt.h	/^	uint16_t offset_1; \/\/ offset bits 0..15$/;"	m	struct:idt_desc	typeref:typename:uint16_t
offset_2	src/idt/idt.h	/^    uint16_t offset_2;  \/\/ offset bits 16..31$/;"	m	struct:idt_desc	typeref:typename:uint16_t
out	src/boot/boot.asm	/^	out dx, al$/;"	d
out	src/io/io.asm	/^	out dx, al$/;"	d
out	src/io/io.asm	/^	out dx, ax$/;"	d
outb	src/io/io.asm	/^outb:$/;"	l
outw	src/io/io.asm	/^outw:$/;"	l
paging_4gb_chunk	src/memory/paging/paging.h	/^struct paging_4gb_chunk$/;"	s
paging_4gb_chunk_get_directory	src/memory/paging/paging.c	/^uint32_t *paging_4gb_chunk_get_directory(struct paging_4gb_chunk *chunk)$/;"	f	typeref:typename:uint32_t *
paging_get_indexes	src/memory/paging/paging.c	/^paging_get_indexes(void *virtual_address, uint32_t *directory_index_out, uint32_t *table_index_o/;"	f	typeref:typename:int
paging_is_aligned	src/memory/paging/paging.c	/^bool paging_is_aligned(void *addr)$/;"	f	typeref:typename:bool
paging_load_directory	src/memory/paging/paging.asm	/^paging_load_directory:$/;"	l
paging_new_4gb	src/memory/paging/paging.c	/^paging_4gb_chunk *paging_new_4gb(uint8_t flags)$/;"	f	typeref:struct:paging_4gb_chunk *
paging_set	src/memory/paging/paging.c	/^paging_set(uint32_t *directory, void *virt, uint32_t val) $/;"	f	typeref:typename:int
paging_switch	src/memory/paging/paging.c	/^paging_switch(uint32_t *directory)$/;"	f	typeref:typename:void
part	src/fs/pparser.h	/^	const char *part;$/;"	m	struct:path_part	typeref:typename:const char *
path_part	src/fs/pparser.h	/^struct path_part$/;"	s
path_root	src/fs/pparser.h	/^struct path_root$/;"	s
pathpars_free	src/fs/pparser.c	/^void pathpars_free(struct path_root *root)$/;"	f	typeref:typename:void
pathparser_create_root	src/fs/pparser.c	/^static struct path_root *pathparser_create_root(int drive_number)$/;"	f	typeref:struct:path_root *	file:
pathparser_get_drive_by_path	src/fs/pparser.c	/^static int pathparser_get_drive_by_path(const char **path)$/;"	f	typeref:typename:int	file:
pathparser_get_path_part	src/fs/pparser.c	/^static const char *pathparser_get_path_part(const char **path)$/;"	f	typeref:typename:const char *	file:
pathparser_parse	src/fs/pparser.c	/^struct path_root *pathparser_parse(const char *path, const char *current_directory_path)$/;"	f	typeref:struct:path_root *
pathparser_parse_path_part	src/fs/pparser.c	/^struct path_part *pathparser_parse_path_part(struct path_part *last_part, const char **path)$/;"	f	typeref:struct:path_part *
pathparser_path_valid_format	src/fs/pparser.c	/^static int pathparser_path_valid_format(const char *filename)$/;"	f	typeref:typename:int	file:
pos	src/disk/streamer.h	/^	int pos;$/;"	m	struct:disk_stream	typeref:typename:int
print	src/kernel.c	/^print(const char* str)$/;"	f	typeref:typename:void
print	tmp/boot_01.asm	/^print:$/;"	l
print	tmp/boot_02.asm	/^print:$/;"	l
print	tmp/boot_03.asm	/^print:$/;"	l
print_char	tmp/boot_01.asm	/^print_char:$/;"	l
print_char	tmp/boot_02.asm	/^print_char:$/;"	l
print_char	tmp/boot_03.asm	/^print_char:$/;"	l
saddr	src/memory/heap/heap.h	/^	void *saddr; \/\/ start address of the heap data pool$/;"	m	struct:heap	typeref:typename:void *
sector_size	src/disk/disk.h	/^	int sector_size;$/;"	m	struct:disk	typeref:typename:int
selector	src/idt/idt.h	/^    uint16_t selector;  \/\/ a code segment selector in GDT or LDT$/;"	m	struct:idt_desc	typeref:typename:uint16_t
start	src/boot/boot.asm	/^start:$/;"	l
start	tmp/boot_01.asm	/^start:$/;"	l
start	tmp/boot_02.asm	/^start:$/;"	l
start	tmp/boot_03.asm	/^start:$/;"	l
step2	src/boot/boot.asm	/^step2:$/;"	l
step2	tmp/boot_01.asm	/^step2:$/;"	l
step2	tmp/boot_02.asm	/^step2:$/;"	l
step2	tmp/boot_03.asm	/^step2:$/;"	l
strlen	src/string/string.c	/^int strlen(const char *ptr)$/;"	f	typeref:typename:int
strnlen	src/string/string.c	/^int strnlen(const char *ptr, int max)$/;"	f	typeref:typename:int
table	src/memory/heap/heap.h	/^	struct heap_table *table;$/;"	m	struct:heap	typeref:struct:heap_table *
terminal_col	src/kernel.c	/^uint16_t terminal_col = 0;$/;"	v	typeref:typename:uint16_t
terminal_initialize	src/kernel.c	/^terminal_initialize()$/;"	f	typeref:typename:void
terminal_make_char	src/kernel.c	/^terminal_make_char(char c, char colour)$/;"	f	typeref:typename:uint16_t
terminal_putchar	src/kernel.c	/^terminal_putchar(int x, int y, char c, char colour)$/;"	f	typeref:typename:void
terminal_row	src/kernel.c	/^uint16_t terminal_row = 0;$/;"	v	typeref:typename:uint16_t
terminal_writechar	src/kernel.c	/^terminal_writechar(char c, char colour)$/;"	f	typeref:typename:void
test_problem	src/kernel.asm	/^test_problem: $/;"	l
times	src/boot/boot.asm	/^times 33 db 0$/;"	l
times	src/boot/boot.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
times	src/kernel.asm	/^times 512-($-$$) db 0$/;"	l
times	tmp/boot_01.asm	/^times 33 db 0$/;"	l
times	tmp/boot_01.asm	/^times 510-($-$$) db 0$/;"	l
times	tmp/boot_02.asm	/^times 33 db 0$/;"	l
times	tmp/boot_02.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
times	tmp/boot_03.asm	/^times 33 db 0$/;"	l
times	tmp/boot_03.asm	/^times 510-($-$$) db 0			;fill zero up to 512 bytes$/;"	l
tonumericdigit	src/string/string.c	/^int tonumericdigit(char c)$/;"	f	typeref:typename:int
total	src/memory/heap/heap.h	/^	size_t total;$/;"	m	struct:heap_table	typeref:typename:size_t
try_again	src/boot/boot.asm	/^.try_again:$/;"	l
type	src/disk/disk.h	/^	OS_DISK_TYPE type;$/;"	m	struct:disk	typeref:typename:OS_DISK_TYPE
type	src/idt/idt.h	/^    uint8_t type;  \/\/ type and attributes, see below$/;"	m	struct:idt_desc	typeref:typename:uint8_t
video_mem	src/kernel.c	/^uint16_t *video_mem = 0;$/;"	v	typeref:typename:uint16_t *
zero	src/idt/idt.h	/^    uint8_t zero;   \/\/ unused, set to 0$/;"	m	struct:idt_desc	typeref:typename:uint8_t
Система типов	doc/c.rst	/^Система типов$/;"	s	chapter:Язык C
Указатели на функции	doc/c.rst	/^Указатели на функции$/;"	s	chapter:Язык C
Язык C	doc/c.rst	/^Язык C$/;"	c
